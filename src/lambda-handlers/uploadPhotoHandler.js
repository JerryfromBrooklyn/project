import * as faceMatchingService from '../services/faceMatchingService'; // Adjust path if needed
import { randomUUID } from 'crypto'; // For generating photo IDs
// --- Helper Function for Responses ---
const createResponse = (statusCode, body) => {
    return {
        statusCode: statusCode,
        headers: {
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Headers": "Content-Type", // Add others if needed (e.g., Authorization)
            "Access-Control-Allow-Methods": "OPTIONS,POST"
        },
        body: JSON.stringify(body),
    };
};
// --- Lambda Handler --- 
// NOTE: Handling file uploads via API Gateway + Lambda can be complex.
// Common patterns:
// 1. Upload directly to S3 from frontend (using pre-signed URLs generated by a backend endpoint).
//    Then trigger this Lambda via S3 Event Notification.
// 2. Send base64 encoded image data in the JSON body (simpler for setup, but less efficient for large files).
// 3. Use multipart/form-data (requires API Gateway config or specific libraries in Lambda).
// This example assumes approach #2 (base64 encoded data in body) for simplicity.
export const handler = async (event) => {
    console.log("UploadPhotoHandler invoked. Event body size:", event.body?.length);
    if (!event.body) {
        return createResponse(400, { message: 'Missing request body.' });
    }
    try {
        // TODO: Get image data (assuming base64 string), uploader info etc. from event.body
        // Make sure API Gateway is configured to handle potentially large request bodies if needed.
        const { imageBase64Data, uploaderInfo } = JSON.parse(event.body);
        if (!imageBase64Data) {
            return createResponse(400, { message: 'Missing image data.' });
        }
        // Generate unique ID for the photo
        const photoId = randomUUID();
        // TODO: Upload image to S3 (if not already done by frontend)
        //       This requires S3 client setup and permissions in IAM policy.
        // const s3Url = await uploadImageToS3(photoId, imageBase64Data); 
        const s3Url = `https://your-s3-bucket.s3.amazonaws.com/photos/${photoId}.jpg`; // **PLACEHOLDER**
        console.log(`Placeholder: Image would be uploaded to ${s3Url}`);
        // TODO: Save photo metadata (URL, uploader, timestamp) to Photos table 
        //       (using databaseService.savePhoto - needs implementation)
        // await databaseService.savePhoto(photoId, s3Url, uploaderInfo?.id || 'unknown_uploader');
        console.log(`Placeholder DB Call: Save photo metadata for ${photoId}, URL: ${s3Url}`);
        // TODO: Get image bytes (Buffer) for Rekognition
        // IMPORTANT: Ensure the frontend sends only the base64 part, without 'data:image/jpeg;base64,' prefix
        const imageBuffer = Buffer.from(imageBase64Data, 'base64');
        // TODO: Call face matching service to process the photo
        // This function handles DetectFaces, IndexFaces, saving to DB, SearchFaces, linking
        await faceMatchingService.processUploadedPhotoForIndexingAndMatching(photoId, imageBuffer);
        console.log(`Successfully processed uploaded photo ${photoId}`);
        // Return success response
        return createResponse(200, {
            message: 'Photo uploaded and processed successfully!',
            photoId: photoId,
            photoUrl: s3Url
        });
    }
    catch (error) {
        console.error("Error during photo upload/processing:", error);
        return createResponse(500, { message: 'Internal server error during photo upload.', error: error.message });
    }
};
